# dap ===========================================j

[[plugins]]
repo = "mfussenegger/nvim-dap"
[[plugins]]
repo = "rcarriga/nvim-dap-ui"
hook_add = '''
" keymaps
nnoremap <silent> <F5>    :lua require'dap'.continue()<CR>
nnoremap <silent> <F6>    :lua require'dap'.step_over()<CR>
nnoremap <silent> <F7>    :lua require'dap'.step_into()<CR>
nnoremap <silent> <F8>    :lua require'dap'.step_out()<CR>
nnoremap <silent> <C-d>b  :lua require'dap'.toggle_breakpoint()<CR>
nnoremap <silent> <C-d>B  :lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition：'))<CR>
nnoremap <silent> <C-d>lp :lua require'dap'.set_breakpoint(nil、nil、vim.fn.input('Log point message：'))<CR>
nnoremap <silent> <C-d>dr :lua require'dap'.repl.open()<CR>
nnoremap <silent> <C-d>dl :lua require'dap'.run_last()<CR>
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
imap <expr><tab> pumvisible() ? "\<C-n>" : "\<tab>"
inoremap <silent> <expr> <CR> "<C-r>=deoplete#close_popup()<CR><CR>"

call deoplete#custom#option({
  \'camel_case': v:true,
  \'ignore_case': v:true,
  \'smart_case': v:true,
  \'skip_multibyte': v:true,
  \'auto_complete_delay': 0,
  \'refresh_always': v:false,
  \'buffer_path': v:true,
  \'min_pattern_length': 1,
  \'max_list': 100,
  \})
'''

[[plugins]]
repo = 'Shougo/deoplete-lsp'

[[plugins]]
repo = 'JuliaEditorSupport/julia-vim'

[[plugins]]
repo = 'https://github.com/woodyZootopia/gitsession.nvim'


[[plugins]]
repo = 'https://github.com/pangloss/vim-javascript'
on_ft = ['html','htm', "js"]


[[plugins]]
repo='Shougo/neoinclude.vim'
on_ft = ['c', 'cpp']
depends=['deoplete.nvim']

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = 'bash install.sh'
hook_add = '''
let g:LanguageClient_settingsPath = expand('~/.config/nvim/lc_settings.json')
let g:LanguageClient_selectionUI = "location-list"
let g:LanguageClient_diagnosticsList = "Location"
let g:LanguageClient_hasSnippetSupport=0

" let g:LanguageClient_loggingFile = expand('~/.config/nvim/LC.log')
" let g:LanguageClient_loggingLevel='DEBUG'


" 言語ごとに設定する
let g:LanguageClient_serverCommands={}

" c/cpp
if executable('clangd')
  let g:LanguageClient_serverCommands['c'] = ['clangd']
  let g:LanguageClient_serverCommands['cpp'] = ['clangd']
elseif executable('clangd-9')
  let g:LanguageClient_serverCommands['c'] = ['clangd-9']
  let g:LanguageClient_serverCommands['cpp'] = ['clangd-9']
endif

" python
" if executable('pyls')
"     let g:LanguageClient_serverCommands['python'] = ['pyls']
" endif

" css/typescript
if executable('css-languageserver')
  let g:LanguageClient_serverCommands['css'] = ['css-languageserver', '--stdio']
  let g:LanguageClient_serverCommands['scss'] = ['css-languageserver', '--stdio']
  let g:LanguageClient_serverCommands['sass'] = ['css-languageserver', '--stdio']
endif

if executable("typescript-language-server")
  let g:LanguageClient_serverCommands['javascript']=['typescript-language-server', '--stdio']
  let g:LanguageClient_serverCommands['typescript']=['typescript-language-server', '--stdio']
endif

" golang
if executable(expand('gopls'))
  let g:LanguageClient_serverCommands['go'] = ["gopls"]
endif
if executable(expand('~/go/bin/go-langserver'))
  let g:LanguageClient_serverCommands['go'] = [expand('~/go/bin/go-langserver'), '-gocodecompletion']
endif

" ruby
if executable("solargraph")
  let g:LanguageClient_serverCommands['ruby']=['solargraph', 'stdio']
endif

" rust
if executable("rust-analyzer")
  let g:LanguageClient_serverCommands['rust']=['rust-analyzer']
endif

"vue js
if executable("vls")
  let g:LanguageClient_serverCommands['vue']=['vls']
endif


" julia
" let g:default_julia_version='1.3'
" let g:LanguageClient_serverCommands['julia'] =  ['julia', '--startup-file=no', '--history-file=no', '-e', ' using LanguageServer; using Pkg; import StaticLint; import SymbolServer; env_path = dirname(Pkg.Types.Context().env.project_file); debug = false; server = LanguageServer.LanguageServerInstance(stdin, stdout, debug, env_path, "", Dict()); server.runlinter = true; run(server);']

" other settings
let g:LanguageClient_useVirtualText = "CodeLens"

function! LC_maps()
  if has_key(g:LanguageClient_serverCommands, &filetype)
    nnoremap <buffer> <silent> K          :call LanguageClient_textDocument_hover()<CR>
    nnoremap <buffer> <silent> <Leader>lh :call LanguageClient_textDocument_hover()<CR>
    nnoremap <buffer> <silent> <Leader>ld :call LanguageClient_textDocument_definition()<CR>
    nnoremap <buffer> <silent> <Leader>li :call LanguageClient_textDocument_implementation()<CR>
    nnoremap <buffer> <silent> <Leader>lr :call LanguageClient_textDocument_rename()<CR>
    nnoremap <buffer> <silent> <Leader>lf :call LanguageClient_textDocument_formatting()<CR>
    nnoremap <buffer> <silent> <Leader>lk :call LanguageClient_textDocument_references()<CR>
    nnoremap <buffer> <silent> <Leader>ls :call LanguageClient_textDocument_documentSymbol()<CR>
    nnoremap <buffer> <silent> <Leader>lm :call LanguageClient_contextMenu()<CR>
    nnoremap <buffer> <silent> <Leader>lt :call LanguageClient_textDocument_typeDefinition()<CR>
  endif
endfunction

autocmd FileType * call LC_maps()

" augroup lcHighlight
"     autocmd!
"     autocmd CursorHold,CursorHoldI *.c,*.cpp call LanguageClient#textDocument_documentHighlight()
" augroup END
'''

[[plugins]]
repo = "ujihisa/neco-look"
on_ft = ["markdown", "tex", "latex", "text"]



[[plugins]]
repo = 'deoplete-plugins/deoplete-jedi'
on_ft = 'python'
depends = ['deoplete.nvim']
hook_source = '''
let g:deoplete#sources#jedi#python_path = g:python3_host_prog
'''

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_source = '''
let g:jedi#auto_initialization=0
let g:jedi#auto_vim_configuration=0
let g:jedi#smart_auto_mappings=0
let g:jedi#completions_enabled=0
let g:force_py_version=3

" call deoplete#custom#source('jedi', 'is_debug_enabled', 1)

function! Jedi_map() abort
  if !has_key(g:LanguageClient_serverCommands, &filetype)
    nnoremap <buffer> <silent> <Leader>lk :call jedi#show_documentation()<CR>
    nnoremap <buffer> <silent> <Leader>ld :call jedi#goto()<CR>
    nnoremap <buffer> <silent> <Leader>li :call jedi#usages()<CR>
    nnoremap <buffer> <silent> <Leader>lr :call jedi#rename()<CR>
  endif
endfunction

autocmd FileType python call Jedi_map()
'''

# colorscheme====================================

[[plugins]]
repo = 'gosukiwi/vim-atom-dark'
hook_add = 'colorscheme atom-dark'

[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
colorscheme molokai
let g:molokai_original=1
let g:rehash256=1
'''

[[plugins]]
repo = 'jonathanfilip/vim-lucius'
hook_add = '''
colorscheme lucius
let g:lucius_contrast_bg='high'
'''

[[plugins]]
repo = 'sheerun/vim-wombat-scheme'
hook_add = 'colorschem wombat'

[[plugins]]
repo = 'woodyZootopia/iceberg.vim'
rev = 'support_LSP'
hook_add = '''
colorscheme iceberg
'''


[[plugins]]
repo = 'https://github.com/itchyny/lightline.vim'
hook_add = '''
let g:lightline = {
  \ 'colorscheme': 'jellybeans',
  \ }
let g:lightline.separator = { 'left': '', 'right': '' }
'''


# denite ========================================

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
nnoremap <silent> <space>fr  :<C-u>Denite -split=floating -start-filter file_mru<CR>
nnoremap <silent> <space>fb  :<C-u>Denite -split=floating -start-filter buffer<CR>
nnoremap <silent> <space>fy  :<C-u>Denite -split=floating -start-filter neoyank<CR>
nnoremap <silent> <space>ff  :<C-u>Denite -split=floating -start-filter file/rec<CR>
nnoremap <silent> <space>fd  :<C-u>Denite -split=floating -start-filter defx/history<CR>
nnoremap <silent> <space>fu  :<C-u>Denite -split=floating -start-filter outline<CR>
nnoremap <silent> <space>fc  :<C-u>Denite -split=floating -start-filter command_history<CR>
nnoremap <silent> <space>fo  :<C-u>Denite -split=floating -start-filter output:
nnoremap <silent> <space>fgl :<C-u>Denite -split=floating -start-filter gitlog<CR>
nnoremap <silent> <space>fgs :<C-u>Denite -split=floating -start-filter gitstatus<CR>
nnoremap <silent> <space>fgc :<C-u>Denite -split=floating -start-filter gitchanged<CR>
nnoremap <silent> <space>fgb :<C-u>Denite -split=floating -start-filter gitbranch<CR>

" Define mappings
autocmd FileType denite call s:denite_my_settings()

function! s:denite_my_settings() abort
  nnoremap <silent><buffer><expr> <CR>  denite#do_map('do_action')
  nnoremap <silent><buffer><expr> <C-j> denite#do_map('do_action')
  nnoremap <silent><buffer><expr> d     denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p     denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> q     denite#do_map('quit')
  nnoremap <silent><buffer><expr> i     denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> v     denite#do_map('toggle_select').'j'
endfunction
'''
[[plugins]]
repo = 'Shougo/unite-outline'
[[plugins]]
repo = 'Shougo/neomru.vim'
[[plugins]]
repo = 'Shougo/neoyank.vim'
[[plugins]]
repo = 'neoclide/denite-git'

# defx ==========================================

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
call defx#custom#column('indent',{'indent': "- "})
call defx#custom#column('mark', {
  \ 'directory_icon': '▸',
  \ 'opened_icon': '▾',
  \ 'readonly_icon': '✗',
  \ 'root_icon': ' ',
  \ 'selected_icon': '✓',
  \ })

call defx#custom#column('git', 'indicators', {
  \ 'Modified'  : '✹',
  \ 'Staged'    : '✚',
  \ 'Untracked' : '✭',
  \ 'Renamed'   : '➜',
  \ 'Unmerged'  : '═',
  \ 'Ignored'   : '☒',
  \ 'Deleted'   : '✖',
  \ 'Unknown'   : '?'
  \})

nnoremap <silent> st        :Defx -new -auto-cd -columns=time:size:git:mark:indent:filename -show-ignored-files `expand('%:p:h')` -search=`expand('%:p')` -split=tab        <CR>
nnoremap <silent> <leader>d :Defx -new -auto-cd -columns=time:size:git:mark:indent:filename -show-ignored-files `expand('%:p:h')` -search=`expand('%:p')` -split=no         <CR>
nnoremap <silent> <leader>n :Defx -new -auto-cd -columns=:git:mark:indent:filename -show-ignored-files `expand('%:p:h')` -search=`expand('%:p')` -split=vertical -winwidth=40 -direction='topleft'<CR>
nnoremap <silent> <leader>z :Defx -new -auto-cd -columns=mark:indent:filename:time      -show-ignored-files `expand('%:p:h')` -search=`expand('%:p')` -split=floating <CR>
" seldom used
" nnoremap <silent> <leader>dv :Defx -new -auto-cd -columns=size:mark:filename:time -show-ignored-files `expand('%:p:h')` -search=`expand('%:p')` -split=vertical -winwidth=50<CR>:IndentLinesDisable<CR>

autocmd FileType defx call s:defx_my_settings()
function!  s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>          defx#do_action('open')
  nnoremap <silent><buffer><expr> o             defx#is_directory()?defx#do_action('open_or_close_tree'):defx#do_action('drop')
  nnoremap <silent><buffer><expr> O             defx#is_directory()?defx#do_action('open_tree_recursive'):defx#do_action('drop','tabnew')
  nnoremap <silent><buffer><expr> <2-LeftMouse> defx#do_action('open')
  nnoremap <silent><buffer><expr> l             defx#do_action('open_directory')
  nnoremap <silent><buffer><expr> K             defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> L             defx#do_action('new_file')
  nnoremap <silent><buffer><expr> h             defx#do_action('cd',['..'])
  nnoremap <silent><buffer><expr> dd            defx#do_action('remove',['..'])
  nnoremap <silent><buffer><expr> r             defx#do_action('rename',['..'])
  nnoremap <silent><buffer><expr> ~             defx#do_action('cd')
  nnoremap <silent><buffer><expr> v             defx#do_action('toggle_select').'j'
  nnoremap <silent><buffer><expr> S             defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> R             defx#do_action('redraw')
  nnoremap <silent><buffer><expr> yy            defx#do_action('yank_path')
  nnoremap <silent><buffer><expr> !             defx#do_action('execute_command')
  nnoremap <silent><buffer><expr> x             defx#do_action('execute_system')
  nnoremap <silent><buffer><expr> c             defx#do_action('copy')
  nnoremap <silent><buffer><expr> p             defx#do_action('paste')
  nnoremap <silent><buffer><expr> Se            defx#do_action('toggle_sort', 'extension')
  nnoremap <silent><buffer><expr> Sn            defx#do_action('toggle_sort', 'filename')
  nnoremap <silent><buffer><expr> Ss            defx#do_action('toggle_sort', 'size')
  nnoremap <silent><buffer><expr> St            defx#do_action('toggle_sort', 'time')
  nnoremap <buffer>               <leader>gd    :call <SID>git_diff_of_directory()<CR>
  nnoremap <silent><buffer><expr> q             defx#do_action('quit')
endfunction

function! s:git_diff_of_directory()
  exe "tabnew"
  exe "read !git diff"
  exe "setf diff"
  exe "setlocal buftype=nofile"
  exe "setlocal bufhidden=hide"
  exe "setlocal noswapfile"
endfunction
'''
[[plugins]]
repo = 'kristijanhusak/defx-git'
[[plugins]]
repo = 'kristijanhusak/defx-icons'
[[plugins]]
repo = 'ryanoasis/vim-devicons'

# deol ==========================================

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
let g:deol#prompt_pattern = '% \|%$'
nnoremap sx :tabnew:cd %:h<CR>:DeolEdit<CR>
nnoremap sz :10new:cd %:h<CR>:Deol<CR>
'''

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
let g:lexima_enable_newline_eules=0
'''

# colorscheme ===================================
[[plugins]]
repo = 'haishanh/night-owl.vim'
hook_add = '''
colorscheme night-owl
set termguicolors
let g:lightline = {
  \ 'colorscheme': 'nightowl',
  \ }
'''

[[plugins]]
repo = 'cocopon/iceberg.vim'
hook_add = '''
colorscheme iceberg
set termguicolors
let g:lightline = {
  \ 'colorscheme': 'iceberg',
  \ }
'''

[[plugins]]
repo = 'nanotech/jellybeans.vim'
hook_add = '''
colorscheme jellybeans
set termguicolors
let g:lightline = {
  \ 'colorscheme': 'jellybeans',
  \ }
'''

[[plugins]]
repo = 'wadackel/vim-dogrun'
hook_add = '''
colorscheme dogrun
set termguicolors
let g:lightline = {
  \ 'colorscheme': 'dogrun',
  \ }
'''

[[plugins]]
repo = 'sainnhe/everforest'
hook_add = '''
colorscheme everforest
set termguicolors
let g:everforest_background = 'soft'
let g:lightline = {
  \ 'colorscheme': 'everforest',
  \ }
'''

